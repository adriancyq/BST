1. testBST.o BSTInt.o BSTNodeInt.o
2. We get the following error:

BSTInt.cpp: In function ‘bool insert(int)’:
BSTInt.cpp:25:8: error: ‘root’ was not declared in this scope
   if (!root) {
        ^
BSTInt.cpp:27:7: error: ‘isize’ was not declared in this scope
     ++isize;
       ^
BSTInt.cpp:31:22: error: ‘root’ was not declared in this scope
   BSTNodeInt* curr = root;
                      ^
BSTInt.cpp:56:5: error: ‘isize’ was not declared in this scope
   ++isize;
     ^
The 'root' and 'isize' member variables were originally defined along with the
BSTInt class. Without a namescope for the insert function, it is now global, but
the function definition still depends on member variables in the BSTInt class.

3. The bug was in the while loop condition of the insert function. The while
loop iterates if and only if the current node has two child nodes.

4. The first step in my debugging process is to understand why the BST passed
the original test. We realized that the order in which the ints were inserted
made it a balanced BST. Thus, I wrote another test, inserting elements 1, 2, 3
that would create a tree that is not balanced. After running the second test,
it outputted that the element '2' was not in the tree, so I knew there must be
an error in how the BST finds where to insert the node. The while loop
condition stood out the most because we do not require the current node to have
two child nodes before excluding it as a location in the tree to insert. After
changing the condition to check 'curr != null', and introducing a parent node
pointer, the BST passed all tests!

5. The insert method in BST.hpp passes its argument by reference, whereas the
insert method in BSTInt.h passes its argument by value. This is probably
because the argument insert in BSTInt.h is guaranteed to be 4 bytes, since it
is an int. However, because the argument for insert in BST.hpp has a generic
datatype, we do not know what the size of that argument is, so we wish to
avoid passing it by value in case that value is big.

6. actors_sorted.txt produces taller trees.

7. For sorted input, we expect BSTs to have height of N, where N is the size of
the tree. Since the input is sorted, each successive element will be bigger,
thus creating a linked list structure where the next node is bigger than the
previous.

We provide the results of a few simulations below, ran with data from
"actors_sorted.txt".

size      |    height
======================
10        |    9
50        |    49
100       |    99
11794     |    11793

This supports our expectations, because as the size of the BST grows, so does
height.

For a random input, I expect a height of log(N).
http://cs.stackexchange.com/questions/6342/proof-that-a-randomly-built-binary-search-tree-has-logarithmic-height

We also provide results of a few simulations below, ran with data from "actors.txt"

size      |    height
======================
10        |    4
50        |    12
100       |    14
11794     |    32

This also supports our expectations of a logarithmic height. If these points
were graphed on an X-Y axis, where the x-axis represents the size, and the
y-axis represents the height, the shape is logarithmic.
